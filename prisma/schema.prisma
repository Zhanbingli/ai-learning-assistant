// Prisma schema for AI Learning Assistant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User profile and preferences
model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?  @unique
  preferences   Json?    // Learning style, notification settings, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  learningPlans LearningPlan[]
  tasks         Task[]
  sessions      StudySession[]
  achievements  Achievement[]
  notes         Note[]
}

// Learning plan for a subject
model LearningPlan {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title         String
  subject       String   // programming, language, math, etc.
  description   String?
  difficulty    String   // beginner, intermediate, advanced

  // Metadata
  aiGenerated   Boolean  @default(false)
  templateId    String?  // Reference to template if used

  // Timeline
  startDate     DateTime?
  targetEndDate DateTime?
  estimatedHours Float?

  // Progress
  status        String   @default("active") // active, paused, completed, abandoned
  progressPercent Float  @default(0)

  // AI context for personalization
  userContext   Json?    // Background, goals, constraints

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  milestones    Milestone[]
  tasks         Task[]

  @@index([userId, status])
}

// Milestones within a learning plan
model Milestone {
  id              String   @id @default(uuid())
  planId          String
  plan            LearningPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  title           String
  description     String?
  order           Int      // Sequence in the plan

  targetDate      DateTime?
  completedAt     DateTime?

  status          String   @default("pending") // pending, in_progress, completed

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tasks           Task[]

  @@index([planId, order])
}

// Individual tasks
model Task {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId          String?
  plan            LearningPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)

  milestoneId     String?
  milestone       Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)

  title           String
  description     String?
  type            String   @default("practice") // practice, project, reading, video, exercise

  // Task sizing
  estimatedMinutes Int?
  actualMinutes   Int?
  difficulty      String?  // easy, medium, hard

  // Status
  status          String   @default("pending") // pending, in_progress, completed, postponed, blocked
  priority        String   @default("medium") // low, medium, high

  // Dates
  dueDate         DateTime?
  startedAt       DateTime?
  completedAt     DateTime?

  // Resources
  resources       Json?    // Links, files, notes

  // AI context
  aiSuggested     Boolean  @default(false)
  blockerReason   String?  // If status is blocked

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sessions        StudySession[]

  @@index([userId, status])
  @@index([planId, status])
}

// Study sessions (Pomodoro tracking)
model StudySession {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId          String?
  task            Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?

  type            String   @default("pomodoro") // pomodoro, break, deep_work
  completed       Boolean  @default(false)

  notes           String?
  focusScore      Int?     // 1-10 self-rated focus

  createdAt       DateTime @default(now())

  @@index([userId, startTime])
}

// Achievements and badges
model Achievement {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type            String   // streak, milestone, consistency, project_complete
  title           String
  description     String?
  badgeIcon       String?

  unlockedAt      DateTime @default(now())

  @@index([userId, type])
}

// Learning notes and reflections
model Note {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title           String?
  content         String
  tags            String?  // Comma-separated

  linkedPlanId    String?
  linkedTaskId    String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, createdAt])
}

// AI conversation history
model AIConversation {
  id              String   @id @default(uuid())
  userId          String?

  provider        String   // openai, anthropic, google, ollama
  model           String

  messages        Json     // Array of {role, content}

  purpose         String?  // plan_generation, coaching, debugging
  metadata        Json?

  createdAt       DateTime @default(now())

  @@index([userId, createdAt])
}

// System templates
model Template {
  id              String   @id @default(uuid())

  name            String   @unique
  category        String   // programming, language, math, etc.
  difficulty      String

  title           String
  description     String
  estimatedHours  Float?

  // Template structure
  structure       Json     // Milestones, tasks, resources

  // Metadata
  author          String?
  downloads       Int      @default(0)
  rating          Float?

  isPublic        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category, difficulty])
}
